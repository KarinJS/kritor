syntax = "proto3";

package kritor.group;

option csharp_namespace = "Kritor.Group";
option java_multiple_files = true;
option java_package = "io.kritor.group";
option go_package = "grpc/kritor/group";

import "group/group_data.proto";

service GroupService {
  rpc BanMember(BanMemberRequest) returns (BanMemberResponse); // 禁言用户
  rpc PokeMember(PokeMemberRequest) returns (PokeMemberResponse); // 戳一戳用户
  rpc KickMember(KickMemberRequest) returns (KickMemberResponse); // 踢出用户
  rpc LeaveGroup(LeaveGroupRequest) returns (LeaveGroupResponse); // 退出群组
  rpc ModifyMemberCard(ModifyMemberCardRequest) returns (ModifyMemberCardResponse); // 修改群名片
  rpc ModifyGroupName(ModifyGroupNameRequest) returns (ModifyGroupNameResponse); // 修改群名称
  rpc ModifyGroupRemark(ModifyGroupRemarkRequest) returns (ModifyGroupRemarkResponse); // 修改群备注
  rpc SetGroupAdmin(SetGroupAdminRequest) returns (SetGroupAdminResponse); // 设置群管理员
  rpc SetGroupUniqueTitle(SetGroupUniqueTitleRequest) returns (SetGroupUniqueTitleResponse); // 设置群头衔
  rpc SetGroupWholeBan(SetGroupWholeBanRequest) returns (SetGroupWholeBanResponse); // 设置全员禁言

  rpc GetGroupInfo(GetGroupInfoRequest) returns (GetGroupInfoResponse); // 获取群信息
  rpc GetGroupList(GetGroupListRequest) returns (GetGroupListResponse); // 获取群列表
  rpc GetGroupMemberInfo(GetGroupMemberInfoRequest) returns (GetGroupMemberInfoResponse); // 获取群成员信息
  rpc GetGroupMemberList(GetGroupMemberListRequest) returns (GetGroupMemberListResponse); // 获取群成员列表

  rpc GetProhibitedUserList(GetProhibitedUserListRequest) returns (GetProhibitedUserListResponse); // 获取禁言用户列表
  rpc GetRemainCountAtAll(GetRemainCountAtAllRequest) returns (GetRemainCountAtAllResponse); // 获取艾特全体成员剩余次数
  rpc GetNotJoinedGroupInfo(GetNotJoinedGroupInfoRequest) returns (GetNotJoinedGroupInfoResponse); // 获取未加入群组信息
  rpc GetGroupHonor(GetGroupHonorRequest) returns (GetGroupHonorResponse); // 获取群荣誉信息
}

message BanMemberRequest {
  uint64 group_id = 1; // 群组ID
  oneof target{
    string target_uid = 2; // 被禁言目标uid
    uint64 target_uin = 3; // 被禁言目标uin
  }
  uint32 duration = 4; // 单位：秒
}

message BanMemberResponse {
  uint64 group_id = 1; // 群组ID
}

message PokeMemberRequest {
  uint64 group_id = 1; // 群组ID
  oneof target{
    string target_uid = 2; // 被戳一戳目标uid
    uint64 target_uin = 3; // 被戳一戳目标uin
  }
}

message PokeMemberResponse {
}

message KickMemberRequest {
  uint64 group_id = 1; // 群组ID
  oneof target{
    string target_uid = 2; // 被踢出目标uid
    uint64 target_uin = 3; // 被踢出目标uin
  }
  optional bool reject_add_request = 6; // 是否拒绝再次申请 默认false
  optional string kick_reason = 5; // 踢出原因，可选
}

message KickMemberResponse {
}

message LeaveGroupRequest {
  uint64 group_id = 1; // 群组ID
}

message LeaveGroupResponse {
}

message ModifyMemberCardRequest {
  uint64 group_id = 1; // 群组ID
  oneof target{
    string target_uid = 2; // 目标uid
    uint64 target_uin = 3; // 目标uin
  }
  string card = 4; // 新的群名片
}

message ModifyMemberCardResponse {
}

message ModifyGroupNameRequest {
  uint64 group_id = 1; // 群组ID
  string group_name = 2; // 新的群名称
}

message ModifyGroupNameResponse {
}

message ModifyGroupRemarkRequest {
  uint64 group_id = 1; // 群组ID
  string remark = 2; // 新的群备注
}

message ModifyGroupRemarkResponse {
}

message SetGroupAdminRequest {
  uint64 group_id = 1; // 群组ID
  oneof target{
    string target_uid = 2; // 目标uid
    uint64 target_uin = 3; // 目标uin
  }
  bool is_admin = 4; // 是否设置为管理员
}

message SetGroupAdminResponse {
}

message SetGroupUniqueTitleRequest {
  uint64 group_id = 1; // 群组ID
  oneof target{
    string target_uid = 2; // 目标uid
    uint64 target_uin = 3; // 目标uin
  }
  string unique_title = 4; // 新的群头衔
}

message SetGroupUniqueTitleResponse {
}

message SetGroupWholeBanRequest {
  uint64 group_id = 1; // 群组ID
  bool is_ban = 2; // 是否全员禁言
}

message SetGroupWholeBanResponse {
}

message GetGroupInfoRequest {
  uint64 group_id = 1; // 群组ID
}

message GetGroupInfoResponse {
  GroupInfo group_info = 1; // 群组信息
}

message GetGroupListRequest {
  optional bool refresh = 1; // 是否刷新缓存
}

message GetGroupListResponse {
  repeated GroupInfo group_info = 1; // 群组信息
}

message GetGroupMemberInfoRequest {
  uint64 group_id = 1; // 群组ID
  oneof target{
    string uid = 2; // 目标uid
    uint64 uin = 3; // 目标uin
  }
  optional bool refresh = 4; // 是否刷新缓存
}

message GetGroupMemberInfoResponse {
  GroupMemberInfo group_member_info = 1; // 群成员信息
}

message GetGroupMemberListRequest {
  uint64 group_id = 1; // 群组ID
  optional bool refresh = 2; // 是否刷新缓存
}

message GetGroupMemberListResponse {
  repeated GroupMemberInfo group_member_info = 1; // 群成员信息
}

message GetProhibitedUserListRequest {
  uint64 group_id = 1; // 群组ID
}

message GetProhibitedUserListResponse {
  repeated ProhibitedUserInfo prohibited_user_info = 1; // 禁言用户信息
}

message GetRemainCountAtAllRequest {
  uint64 group_id = 1; // 群组ID
}

message GetRemainCountAtAllResponse {
  uint32 remain_count_for_group = 1; // 剩余次数对于全群
  bool access_at_all = 2;
  uint32 remain_count_for_self = 3; // 剩余次数对于自己
}

message GetNotJoinedGroupInfoRequest {
  uint64 group_id = 1; // 群号
}

message GetNotJoinedGroupInfoResponse {
  NotJoinedGroupInfo group_info = 1; // 未加入群组信息
}

message GetGroupHonorRequest {
  uint64 group_id = 1; // 群号
  optional bool refresh = 2; // 是否刷新缓存
}

message GetGroupHonorResponse {
  repeated GroupHonorInfo group_honor_info = 1; // 群荣誉信息
}
