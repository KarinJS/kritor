/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

syntax = "proto3";

package kritor.message;

option csharp_namespace = "Kritor.Message";
option java_multiple_files = true;
option java_package = "io.kritor.message";
option go_package = "grpc/kritor/message";

import "common/contact.proto";
import "common/message_data.proto";
import "common/message_element.proto";

service MessageService {
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse); // 发送消息
  rpc SendMessageByResId(SendMessageByResIdRequest) returns (SendMessageByResIdResponse); // 通过资源ID发送消息(转发消息
  rpc SetMessageReaded(SetMessageReadRequest) returns (SetMessageReadResponse); // 清空本地聊天记录
  rpc RecallMessage(RecallMessageRequest) returns (RecallMessageResponse); // 撤回消息
  rpc ReactMessageWithEmoji(ReactMessageWithEmojiRequest) returns (ReactMessageWithEmojiResponse); // 设置消息评论表情

  rpc GetMessage(GetMessageRequest) returns (GetMessageResponse); // 获取消息
  rpc GetMessageBySeq(GetMessageBySeqRequest) returns (GetMessageBySeqResponse); // 获取消息
  rpc GetHistoryMessage(GetHistoryMessageRequest) returns (GetHistoryMessageResponse); // 获取历史消息
  rpc GetHistoryMessageBySeq(GetHistoryMessageBySeqRequest) returns (GetHistoryMessageBySeqResponse); // 获取历史消息

  rpc UploadForwardMessage(UploadForwardMessageRequest) returns (UploadForwardMessageResponse); // 上传合并转发消息
  rpc DownloadForwardMessage(DownloadForwardMessageRequest) returns (DownloadForwardMessageResponse); // 下载合并转发消息

  rpc GetEssenceMessageList(GetEssenceMessageListRequest) returns (GetEssenceMessageListResponse); // 获取精华消息
  rpc SetEssenceMessage(SetEssenceMessageRequest) returns (SetEssenceMessageResponse); // 设置精华消息
  rpc DeleteEssenceMessage(DeleteEssenceMessageRequest) returns (DeleteEssenceMessageResponse); // 删除精华消息
}

message SendMessageRequest {
  kritor.common.Contact contact = 1; // 发送目标
  repeated kritor.common.Element elements = 2; // 发的什么东西
  optional uint32 retry_count = 3; // 重试次数

  // passive_id
  optional string message_id = 4;
  optional string notice_id = 5;
  optional string request_id = 6;
}

message SendMessageResponse {
  string message_id = 1; // 发送成功后的消息ID
  uint64 message_time = 2; // 发送时间
}

message SendMessageByResIdRequest {
  kritor.common.Contact contact = 1;
  string res_id = 2;
  optional uint32 retry_count = 3;
}

message SendMessageByResIdResponse {
  string message_id = 1;
  uint64 message_time = 2;
}

message SetMessageReadRequest {
  kritor.common.Contact contact = 1; // 要清空的目标
}

message SetMessageReadResponse {
}

message RecallMessageRequest {
  kritor.common.Contact contact = 1; // 要撤回的目标，私聊则为对方，而不是写自己
  string message_id = 2; // 要撤回的消息ID
}

message RecallMessageResponse {
}

message ReactMessageWithEmojiRequest {
  kritor.common.Contact contact = 1;
  string message_id = 2; // 要设置的消息ID
  uint32 face_id = 3; // 表情ID
  bool is_set = 4; // 是否是评论,如果是false，则为撤销
}

message ReactMessageWithEmojiResponse {
}

message GetMessageRequest {
  kritor.common.Contact contact = 1; // 要获取的目标
  string message_id = 2; // 要获取的消息ID
}

message GetMessageResponse {
  kritor.common.PushMessageBody message = 1; // 获取到的消息
}

message GetMessageBySeqRequest {
  kritor.common.Contact contact = 1; // 要获取的目标
  uint64 message_seq = 2; // 要获取的消息序号
}

message GetMessageBySeqResponse {
  kritor.common.PushMessageBody message = 1; // 获取到的消息
}

message GetHistoryMessageRequest {
  kritor.common.Contact contact = 1; // 要获取的目标
  optional string start_message_id = 2; // 起始消息ID 默认最新一条开始
  optional uint32 count = 3; // 获取数量 默认10
}

message GetHistoryMessageResponse {
  repeated kritor.common.PushMessageBody messages = 1; // 获取到的消息
}

message GetHistoryMessageBySeqRequest {
  kritor.common.Contact contact = 1; // 要获取的目标
  optional uint64 start_message_seq = 2; // 起始消息ID 默认最新一条开始
  optional uint32 count = 3; // 获取数量 默认10
}

message GetHistoryMessageBySeqResponse {
  repeated kritor.common.PushMessageBody messages = 1; // 获取到的消息
}

message UploadForwardMessageRequest {
  kritor.common.Contact contact = 1;
  repeated kritor.common.ForwardMessageBody messages = 2;
  optional uint32 retry_count = 3;
}

message UploadForwardMessageResponse {
  string res_id = 1;
}

message DownloadForwardMessageRequest {
  string res_id = 1; // 资源ID
}

message DownloadForwardMessageResponse {
  repeated kritor.common.PushMessageBody messages = 1; // 获取到的消息
}

message GetEssenceMessageListRequest {
  uint64 group_id = 1;
  uint32 page = 2;
  uint32 page_size = 3;
}

message GetEssenceMessageListResponse {
  repeated kritor.common.EssenceMessageBody messages = 1;
}

message SetEssenceMessageRequest {
  uint64 group_id = 1;
  string message_id = 2; // 要设置为精华消息的消息ID
}

message SetEssenceMessageResponse {
}

message DeleteEssenceMessageRequest {
  uint64 group_id = 1;
  string message_id = 2; // 要删除的消息ID
}

message DeleteEssenceMessageResponse {
}